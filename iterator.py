import sys
'''Python - может создавать специальные классы: Итераторы, Контейнеры, Перечисления.'''
print(sys.version) # Это два метода которые позволяют получить информацию о версии питона
print(sys.version_info)

# Специальный метод exit() модуля sys позволяет завершить выполнение программы
# sys.exit()



'''Итераторы - это классы, которые генерируют последовательность каких-либо значений, их можно использовать в цикле for.

Чтобы превратить класс в итератор, следуеит переопределить в нем два магических метода: 
1) __iter__(self) - магический метод действует аналогично методу __init__()
    Но всегда должны возвращать сам объект итератора.
2) __next__(self) - позволяет выполнять операции и должен возвращать следующий элемент в последовательности.
    Если последовательность закончена то в этом методе следует возбудить исключение типа StopIteration которое 
    сообщит методу next() об окончанию итерации.

Если определены __iter__() и метод __getitem__() то предпочтение отдается первому методу __iter__()
Тоесть при помощи магических методов класса, мы реализуем методы iter() и next() которые можем
применять к обычным последовательносятм.
'''
# Класс Итератор
class MyIterator:
    # По мимо методов и аргументов, прямо в классе можно описать некий код
    # который будет выполнен на уровне класса сразу.
    print('============== Первый Пример Итератора ==============')

    def __iter__(self):
        self.counter = 1
        return self

    def __next__(self):
        current = self.counter
        self.counter += 1
        return current

# Создаем экземпляр класса итератора
it = MyIterator()

# Теперь когда в классе определены методы __iter__ и __next__
# Мы можем взаимодействовать с этим обьектом и итерировать его
# При помощи методов iter() и next()
myiter = iter(it)   # Создаю итератор
print(next(myiter)) # 1
print(next(myiter)) # 2
print(next(myiter)) # 3
print(next(myiter)) # 4
print(next(myiter)) # 5
# В этот момент итератор в обьекте равен уже 6 но он просто не выводится





# В примере выше класс будет выводить чмсла в бесконечность, без ограничений
# Чтобы итерация не продолжалась вечно, мы можем использовать оператор StopIteration
# Для остановки цикла, по достижению нужного числа выдаем исключение StopIteration
class MyNumber():
    print('============== Второй Пример Итератора ==============')

    # При инициализауии станвоим ограничение на вывод количества чисел
    def __init__(self, max):
        self.max = max

    # Установка итератора
    def __iter__(self):
        self.number = 1
        return self

    # Для вывода след числа
    def __next__(self):
        if self.number <= self.max:
            current = self.number
            self.number += 1
            return current
        else:
            raise StopIteration

    # Вывод итератора в цикле до установленного максимума при инициализации
    def for_iter(self, iterator):
        for i in iterator:
            print(i)

it = MyNumber(7)
myiter = iter(it)
it.for_iter(myiter)



print('============== Третий Пример Итератора ==============')










sys.exit()
'''Контейнер - это классы которые выступают в качестве последовательности((списка или кортежа),
или как отображения(словаря). Можно обратиться к любомуэллементу экземпляра этого класса через его индекс или ключ.'''
# Класс Контейнер имитирует список
class MyList:
    pass

# Класс Контейнер имитирут словарь
class MyDict:
    pass

# Создаем Экземпляры наших Контейнеров
lst, dct = MyList(), MyDict()

# Присваеваем им значения
lst[0] = 1
dct['first'] = 567

# Используем их для вывода
print('lst[0] = ', lst[0])
print("dct['first'] = ", dct['first'])



'''Перечисления - специальные классы, состоит из специальных именованных величин. Поддержка начиная с Python 3.4'''
from enum import Enum

# Определяем класс Перечислениу
class Versions(Enum):
    Python2 = '2.7'
    Python3 = '3.4'

# Используем его
print(Versions.Python2)
print(Versions.Python3)



