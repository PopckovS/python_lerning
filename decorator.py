'''Декоратор в Python – это функция, которая принимает другую функцию в качестве аргумента.

Декоратор модифицирует или повышает принятую функцию и выдает измененную.

'''

# Общая функция декоратор, котораяпринимает в себя аргумент, этот аргумент является
# названием функции, которая будет подвержена декорации.
def decorator_function(func):
    # Функция декоратор для что умножает на 2
    def the_wrapper_2():
        return func() * 2
    # Функция декоратор для что умножает на 3
    def the_wrapper_3():
        return func() * 3

    # При возврате функции что оборачиваема, мы возвращаем только ее название без скобок.
    return the_wrapper_2

# Это функция которая будет декорируема, тоесть сама по себе будет
# являться аргументом для другой функции.
@decorator_function
def func_1():
    var1 = 1
    return var1

# Вызываем функцию в функции, полученое вырожение используется как функция
result = decorator_function(func_1)
print('Первый способ вызова: ', result())

# Вызываем нужную функцию с аргументом в качестве другой функции, в конце просто + скобки
print('Второй способ вызова, в одну строчку: ', decorator_function(func_1)())

# Вызов не функции декоратора а самой декорируемой функции, возможно только при
# определении декоратора через @функция_декоратор
print('Третий способ:', func_1())
#
# Тоесть декоратор в Python это синтаксический сахар для удобной записи
# Чтобы этим @decorator_function
# это decorator_function(func_1)() заменить на это func_1()