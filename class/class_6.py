'''Примеры создания и работы с классами в Python'''

# =========================================================================================
# В фигурных скобках при обьявлении класса, можно указать
# классы родители, если их нету то скобки можно опускать.
class MyClass1:
    '''Класс - обьявляет аргумент(число), инкрементирует его и выводит.'''

    print('/*====== Первый пример работы класса ======*/')

    def __init__(self, values):
        self.values = values

    def increment_values(self):
        self.values += 1

    def print_values(self):
        return print(self.values)

my1 = MyClass1(10)
# Получаме доступ к аргументам при помощи методов самого класса
my1.print_values()
my1.increment_values()
my1.print_values()

# getattr - получает значение аттрибута обьекта по его имени, если такого аттрибута не найдено
# то генерир исключение AttributeError. Если атриб не найден то в третий параметр можно передать
# значение которое будет возвращено по умолчанию.
print(getattr(my1, 'values', 'Это значение будет возвращено по умолчанию.'))
print(getattr(my1, 'value2', 'Это значение будет возвращено по умолчанию.'))

# setattr - задает значение атрибута, название атриб указ в виде строки. Вторым аргументом можно
# указывать несуществующий атрибут, в таком случае он будет создан.
setattr(my1, 'values', 'this is new values!')
print(getattr(my1, 'values'))

# hasattr - проверяет существование атрибута в обьекте, возвращает True/False
print(f'Существует ли значение values в обьекте my1 = {hasattr(my1, "values")}')
print(f'Существует ли значение values2 в обьекте my1 = {hasattr(my1, "values2")}')

# delattr - Удаляет указанный атрибут из обьекта
print(f"Удаляем атрибут values из обьекта my1")
{delattr(my1, 'values')}
print(f'Существует ли значение values после удаления delattr в обьекте my1 = {hasattr(my1, "values")}')



# =========================================================================================
# Атрибут обекта класса - Статический атрибут, при изменении меняется для всех обьектов класса,
# ибо статичен а значит определен для класса.
# Атрибут экземпляра класса - Динамический атрибут, у каждого экземпляра клааса они свои
class MyClass2():
    print('/*===== Пример работы со вторым классом, для демонстрации разницы'
          ' между динамическим и статическим типмо атрибутов =====*/')
    pass

my_1, my_2 = MyClass2, MyClass2

MyClass2.x = 55 # Обьявил один раз, и он действует для всех ибо определен на уровне класса
my_1.y = 10 #
my_2.y = 10 #

print(f'my_1.x = {my_1.x}, my_1.y = {my_1.y}')
print(f'my_2.x = {my_2.x}, my_2.y = {my_2.y}')
MyClass2.x = 88
print(f'my_1.x = {my_1.x}, my_1.y = {my_1.y}')
print(f'my_2.x = {my_2.x}, my_2.y = {my_2.y}')



# =========================================================================================
# Методы __init__() и __del__() При создании экземпляра класса интерпретатор автом вызывает метод
# __init__() - Просто констуктор класса.
# __del__()  - Деструктор вызыв автоматически при уничтожении экземпляра класса.
class MyClass3:
    print('/*===== Пример работы Третьего класса =====*/')

    def __init__(self, var1, var2):
        self.var1 = var1
        self.var2 = var2

    # MyClass3.__name__ метод возвращает название класса
    def __del__(self):
        print(f'Класс {MyClass3.__name__} уничтожен')

my3 = MyClass3(10, 20)
print(f"my3.var1 = {my3.var1}, my3.var2 = {my3.var2}")

# Удаляем экз-р класса
del my3




