'''Операторы в Python'''
start_block = '============================'


''''''
print(start_block)
print('Символ // вернет полную часть от деления{0}'.format(15//4))
print('Символ % вернет остаток от деления{0}'.format(15%4))
# Answer:


'''Операторы тождественности в Python
is - Возвращает true если переменные являются одним объектом (x is y)
is not - Возвращает true если переменные разные (x is not y)
'''
print(start_block)

def operator_is(x, y):
    if x is y:
        print('{0} is {1} = верно'.format(x, y))
    else:
        print('{0} is {1} = не верно'.format(x, y))

operator_is('str', 'str')
operator_is('str1', 'str')
operator_is(19, 19)
operator_is(19, 25)
# Answer:



'''Операторы принадлежности в Python
Операторы принадлежности используются для проверки того, представлена ​​ли последовательность в объекте
in - Возвращает True если последовательность присутствует в объекте (x in y)
not in - Возвращает True если последовательность не присутствует в объекте (x not in y)
'''
print(start_block)

def operator_in(x, y):
    if x in y:
        print('Верно {0} in {1}'.format(x, y))
    else:
        print('Не верно {0} in {1}'.format(x, y))

operator_in(1, [1, 2, 3])
operator_in(1, [2, 3, 4])

# Можно искать одно значение в массиве
print('Проверка находится ли одно значение в массиве(списке) 1 in [1,2,3] = ', end='')
print(1 in [1,2,3], end='\n')

# Если мы вводим несколько значений для поиска в массиве, то поиск будет по последнему значению
print('Указав несколько значений, поиск будет только по последнему из ни 1,2 in [1,2,3] = ', end='')
print(1,2 in [1,2,3], end='\n')

# Возможно вы захотите указать эллементы массивом, но нет Python будет искать уже массив
# а не его отдельные эллементы
print('''Указав поиск массива в другом массиве, будет поиск именно массива а не его отдельных эллементов [1,2] in [1,2,3] = ''', end='')
print([1,2] in [1,2,3], end='\n')

# Можно найти один массив в другом массиве
print('Поиск одного массива в другом массиве [1,2] in [[1,2],2,3] = ', end='')
print([1,2] in [[1,2],2,3], end='\n')
# Answer:



''''''
print(start_block)
print()
# Answer:
